# -*- coding: utf-8 -*-
"""2019556055_data_visulation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jHiaus0n_yXimX6nLeGG1wUfAWIRWDIj
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px
import seaborn as sns
import os
import scipy as sp
import warnings
import datetime
warnings.filterwarnings("ignore")
# %matplotlib inline

data = pd.read_csv("/content/drive/MyDrive/Computer Engineering/dataVisulation/supermarket_sales.csv")

"""# About Data"""

data

data.head()

data.shape

data.describe()

data.info()

data.value_counts()

data = data.set_index('Invoice ID')

data.head()

data.dtypes

data.columns

data.isnull().sum()

data.isnull().any()

data['date'] = pd.to_datetime(data['Date'])

data['date']

type(data['date'])

data['day'] = (data['date']).dt.day
data['month'] = (data['date']).dt.month
data['year'] = (data['date']).dt.year

data['month'].replace([1,2,3], ['Jan', 'Feb', 'March'], inplace = True)

data['Time'] = pd.to_datetime(data['Time'])
data['Hour'] = (data['Time']).dt.hour
data['Hour'].nunique()

data['Hour'].unique()

categorical_columns = [cname for cname in data.columns if data[cname].dtype == "object"]
categorical_columns

print("# unique values in Branch: {0}".format(len(data['Branch'].unique().tolist())))
print("# unique values in City: {0}".format(len(data['City'].unique().tolist())))
print("# unique values in Customer Type: {0}".format(len(data['Customer type'].unique().tolist())))
print("# unique values in Gender: {0}".format(len(data['Gender'].unique().tolist())))
print("# unique values in Product Line: {0}".format(len(data['Product line'].unique().tolist())))
print("# unique values in Payment: {0}".format(len(data['Payment'].unique().tolist())))

data = data.drop('Tax 5%', axis =1)
data = data.drop('day', axis =1)
data = data.drop('gross margin percentage', axis =1)

data.describe()

print("*** Line Numbers by Cities ***")
data['City'].value_counts(ascending = True)

print("*** Line Numbers by Product Categories ***")
data['Product line'].value_counts(ascending = True)

df_revenue_by_city = data.groupby('City').agg([np.sum, np.median, np.mean])
df_revenue_by_city[['gross income']].T

df_revenue_by_city[['gross income', 'Unit price', 'Quantity']]

df_revenue_by_gender = data.groupby('Gender').agg([np.median,np.mean, sum])
df_revenue_by_gender.T

df_revenue_by_membre = data.groupby('Customer type').agg([np.median, sum])
df_revenue_by_membre.T

data.corr()

"""# About Data (With Graphs)"""

corr_matrix = data.corr()

fig = px.imshow(corr_matrix,
                labels=dict(color="Korelasyon"),
                x=corr_matrix.index,
                y=corr_matrix.columns,
                color_continuous_scale="Viridis",
                title="Korelasyon Heatmap")
fig.show()

data.hist(figsize=(20,14))
plt.show()

plt.figure(figsize = (12,10))

sns.heatmap(data.corr(), annot =True)

data.columns

sns.pairplot(data=data)

"""# QUESTIONS

QUESTION 1.1 => How does the total number of sales of products according to their prices vary by category?
"""

fig, axes = plt.subplots(nrows=2, figsize=(16, 12))

sns.pointplot(x='Product line', y='Unit price', data=data, ax=axes[0])
axes[0].set_title('Product line per Unit price')

sns.pointplot(x='Product line', y='Quantity', data=data, ax=axes[1])
axes[1].set_title('Product line per Quantity')

plt.show()

"""QUESTION 1.2 => The previous chart showed the effect of the total number of sales according to the prices of the products by category. So, how does this effect vary depending on payment methods ( defined as size=quantity)? Let's examine this change according to January and March."""

january_data = data[data['month'] == 'Jan']
february_data = data[data['month'] == 'March']

color_palette = px.colors.qualitative.Set1

fig1 = px.scatter(january_data, x='Product line', y='Unit price', color='Payment', size='Quantity',
               category_orders={"Product line": sorted(january_data['Product line'].unique())},
               width=1000, height=600, color_discrete_sequence=color_palette)

fig2 = px.scatter(february_data, x='Product line', y='Unit price', color='Payment', size='Quantity',
               category_orders={"Product line": sorted(february_data['Product line'].unique())},
               width=1000, height=600, color_discrete_sequence=color_palette)

fig1.update_layout(
    title="Categories by Unit Prices - January",
    xaxis_title="Categories",
    yaxis_title="Unit Price",
    legend_title="Payment Method",
    autosize=False,
)

fig2.update_layout(
    title="Categories by Unit Prices - March",
    xaxis_title="Categories",
    yaxis_title="Unit Price",
    legend_title="Payment Method",
    autosize=False,
)

size_value = 10
fig1.update_yaxes(title_standoff=0)
fig2.update_yaxes(title_standoff=0)

fig1.update_layout(height=1000)
fig2.update_layout(height=1000)

fig1.show()
fig2.show()

"""QUESTION 2 => How do total sales vary by category and city?"""

city_product_ratings = data.groupby(['City', 'Product line'])['Total'].mean().reset_index()

plt.figure(figsize=(14, 8))
ax = sns.barplot(x='Product line', y='Total', hue='City', data=city_product_ratings, palette='Set3')
plt.title('Total Sales by Product Categories for Each City')
plt.xlabel('Product Categories')
plt.ylabel('Total Sales')
plt.xticks(rotation=45, ha='right')

plt.legend(title='City', bbox_to_anchor=(0.5, 1.15), loc='upper center', ncol=3)

plt.show()

"""QUESTION 3.1 => What is the effect of customer satisfaction on product sales?"""

color_scale = [[0.0, 'rgb(0, 0, 255)'], [1.0, 'rgb(0, 255, 0)']]

fig = px.scatter(data, x='Rating', y='Total', color='Total',
                 title='Relationship between Customer Satisfaction and Total Sales',
                 labels={'Rating': 'Customer Satisfaction', 'Total': 'Total Sales'},
                 height=600,
                 color_continuous_scale=color_scale)
fig.show()

"""QUESTION 3.2 => How does this impact vary by city?"""

fig = px.scatter(data, x='Rating', y='Total', color='City',
                 title='Relationship between Customer Satisfaction and Product Sales (By Cities)',
                 labels={'Rating': 'Customer Satisfaction', 'Total': 'Total Sales'},
                 facet_col='City', facet_col_wrap=3, facet_col_spacing=0.05,
                 height=400, width=900)

fig.show()

"""QUESTION 4.1 => What are the total sales and unit price values of member and non-member customers based on categories?"""

catplot = sns.catplot(x='Product line', y='Total', hue='Customer type', data=data, kind='bar', aspect=3)
plt.title('Total Sales(Average) by Customer Type and Product Line')
plt.show()

catplot = sns.catplot(x='Product line', y='Quantity', hue='Customer type', data=data, kind='bar', aspect=3)
plt.title('Quantity(Average by Customer Type and Product Line')
plt.show()

"""QUESTION 4.2 => How are the total sales of member and non-member customers divided by category?"""

member_df = data[data['Customer type'] == 'Member']

fig = px.box(member_df, x='Product line', y='Total', title='Members\' Spending on Product Lines',
             labels={'Product line': 'Product Lines', 'Total': 'Total Sales'})
fig.show()

normal_df = data[data['Customer type'] == 'Normal']
fig = px.box(normal_df, x='Product line', y='Total', title='Non-members\' Spending on Product Lines',
             labels={'Product line': 'Product Lines', 'Total': 'Total Sales'})
fig.show()

"""QUESTION 5 => How does the sales density vary depending on the days of the week and the hours of those days?"""

data['Date'] = pd.to_datetime(data['Date'])
data['Time'] = pd.to_datetime(data['Time']).dt.time
data['DateTime'] = data['Date'] + pd.to_timedelta(data['Time'].astype(str))
data['Day'] = data['DateTime'].dt.day_name()
data['Hour'] = data['DateTime'].dt.hour

heatmap_data = data.pivot_table(values='Total', index='Day', columns='Hour', aggfunc='sum')

fig = px.imshow(heatmap_data, x=heatmap_data.columns, y=heatmap_data.index, color_continuous_scale='YlGnBu', title='Total Sales for Days and Hours Heatmap')

annotations = []
for i, day in enumerate(heatmap_data.index):
    for j, hour in enumerate(heatmap_data.columns):
        annotations.append(dict(x=hour, y=day, text=f'{heatmap_data.iloc[i, j]:.1f}', showarrow=False))

fig.update_layout(annotations=annotations)
fig.update_layout(xaxis_title='Hour', yaxis_title='Day')

# Set hover text
fig.update_traces(hovertemplate='Day: %{y}<br>Hour: %{x}<br>Total Sales: %{z:.1f}')

fig.show()